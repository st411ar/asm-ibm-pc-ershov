ГЛАВА 2                                                Выполнение программ
__________________________________________________________________________

     Ц е л ь: Представить машинный язык, ввод команд в память и выполнение
программ.


     ВВЕДЕНИЕ
     ________________________________________________________________

     Основой данной главы является использование DOS  программы  с  именем
DEBUG,  которая  позволяет  просматривать  память,  вводить  программы   и
осуществлять трассировку их выполнения. В главе показан процесс ввода этих
программ непосредственно в память в  область  сегмента  кодов  и  объяснен
каждый шаг выполнения программы.
     Начальные упражнения научат  проверять  содержимое  конкретных  ячеек
памяти. В первом примере программы используются  непосредственные  данные,
определенные в командах  загрузки  регистров и в арифметических  командах.
Второй  пример  программы  использует  данные,  определенные  отдельно   в
сегменте данных.  Трассировка этих команд в процессе выполнения  программы
позволяет понять действия компьютера и роль регистров.
     Для начала не требуется предварительных  знаний  языка  асcемблера  и
даже программирования.  Все что необходимо - это IBM  PC  или  совместимый
микрокомпьютер и диск с операционной cистемой DOS.


     НАЧАЛО РАБОТЫ
     ________________________________________________________________

     Прежде всего необходимо вставить дискету с DOS в  левый  дисковод  A.
Если питание выключено, то его надо включить; eсли питание  уже  включено,
нажмите вместе и задержите клавиши Ctrl и Alt и нажмите клавишу Del.
     Когда рабочая часть DOS будет загружена в память, на экране  появится
запрос для ввода даты и времени, а затем буква текущего дисковода,  обычно
A для дискеты и  C  для  винчестера  (твердого  диска).  Изменить  текущий
дисковод можно, нажав соответствующую букву, двоеточие и  клавишу  Return.
Это обычная процедура загрузки, которую следует  использовать  всякий  раз
для упражнений из этой книги.


     ПРОСМОТР ЯЧЕЕК ПАМЯТИ
     ________________________________________________________________

     В этом первом  упражнении  для  просмотра  содержимого  ячеек  памяти
используется программа DOS DEBUG.  Для запуска этой пограммы введите DEBUG
и нажмите Return, в результате программа DEBUG должна загрузится с диска в
память.  После окончания загрузки на экране появится  приглашение  в  виде
дефиса, что  свидетельствует  о  готовности  программы  DEBUG  для  приема
команд.  Единственная  команда,  которая  имеет  oтношение    к    данному
упражнению, это D - для дампа памяти.

          1. Р а з м е р  п а м я т и.  Сначала проверим размер  доступной
     для работы памяти.  В зависимости от модели компьютера  это  значение
     связано с установкой внутренних переключателей и может  быть  меньше,
     чем реально существует.  Данное значение находится в  ячейках  памяти
     шест.413 и 414 и его можно просмотреть из DEBUG по адресу, состоящему
     из двух частей:

               400 - это  адрес  сегмента,  который  записывается  как  40
          (последний нуль подразумевается) и
               13 - это смещение от начала сегмента.  Таким образом, можно
          ввести следующий запрос:

                        D 40:13  (и нажать Return)

     Первые два байта, появившиеся в результате на экране, содержат размер
памяти в килобайтах и  в  шестнадцатеричном  представлении,  причем  байты
располагаются в обратной последовательности.  Несколько следующих примеров
показывают шест. обратное, шест. нормальное и десятичные представления.

               Шест. обратн.   Шест. норм.    Десятичн. (К)

                    8000           0080           128
                    0001           0100           256
                    8001           0180           384
                    0002           0200           512
                    8002           0280           640

          2. С е р и й н ы й  н о м е р. Серийный номер компьютера "зашит"
     в ROM по адресу шест. FE000. Чтобы увидеть его, следует ввести:

               D FE00:0 (и нажать Return)

     В результате на экране появится семизначный номер компьютера  и  дата
     копирайт.
          3. Д а т а  ROM BIOS. Дата ROM BIOS в формате mm/dd/yy находится
     по шест. адресу FFFF5. Введите

               D FFFF:05 (и нажмите Return)

     знание этой информации (даты) иногда бывает полезным для  определения
     модели и возраста компьютера.

     Теперь, поскольку вы знаете, как пользоваться командой  D  (Display),
можно устанавливать адрес любой ячейки памяти для  просмотра  содержимого.
Можно также пролистывать память, периодически нажимая клавишу D,  -  DEBUG
выведет на экран адреса, следующие за последней командой.
     Для окончания работы и выхода из отладчика в DOS  введите  команду  Q
(Quit).  Рассмотрим   теперь    использование    отладчика    DEBUG    для
непосредственного ввода программ в память и трассировки их выполнения.


     ПРИМЕР МАШИННЫХ КОДОВ: НЕПОСРЕДСТВЕННЫЕ ДАННЫЕ
     ________________________________________________________________

     Цель  данного  примера  -  проиллюстрировать  простую  программу   на
машинном языке, ее представление в  памяти  и  результаты  ее  выполнения.
Программа показана в шестнадцатиричном формате:

               Команда             Назначение

               B82301    Переслать шест. значение 0123 в AX.
               052500    Прибавить шест. значение 0025 к AX.
               8BD8      Переслать содержимое AX в BX.
               03D8      Прибавить содержимое AX к BX.
               8BCB      Переслать содержимое BX в CX.
               2BC8      Вычесть содержимое AX из AX (очистка AX).
               90        Нет операции.
               CB        Возврат в DOS.

     Можно заметить, что машинные команды имеют различную длину: один, два
или три байта. Машинные команды находятся в памяти непосредственно друг за
другом.  Выполнение  программы  начинается  с  первой  команды  и    далее
последовательно выполняются остальные. Не следует, однако, в данный момент
искать большой смысл в приведенном машинном коде. Например, в одном случае
MOV - шест.B8, а в другом - шест.8B.
   Можно ввести эту программу непосредственно в память машины и  выполнить
ее покомандно. В тоже время можно просматривать cодержимое регистров после
выполнения каждой команды.  Начнем данное упражнение так же  как  делалось
предыдущее - ввод команды oтладчика DEBUG и нажатие клавиши Return.  После
загрузки DEBUG на экране высвечивается приглашение к вводу команд  в  виде
дефиса.  Для печати данного упражнения включите принтер и нажмите  Ctrl  и
PrtSc одновременно.
     Для непосредственного  ввода  программы  на  машинном  языке  введите
следующую команду, включая пробелы:

               E CS:100 B8 23 01 05 25 00 (нажмите Return)

     Команда E обозначает Enter (ввод).  CS:100 определяет  адрес  памяти,
куда будут вводиться команды,  - шест.100 (256) байт  от  начала  сегмента
кодов.  (Обычный  стартовый  адрес  для машинных кодов в отладчике DEBUG).
Команда E записывает каждую пару шестнадцатиpичных цифр в  память  в  виде
байта, начиная с адреса CS:100 до адреса CS:105.
     Следующая команда Enter:

               E CS:106 8B D8 03 D8 8B CB (Return)

вводит шесть байтов в ячейки, начиная с адреса CS:106 и далее в 107,  108,
109, 10A и 10B. Последняя команда Enter:

               E CS:10C 2B C8 2B C0 90 CB (Return)

вводит шесть байтов, начиная  с  CS:10C  в  10D,  10E,  10F,  110  и  111.
Проверьте правильность  ввода  значений.  Если  есть  ошибки,  то  следует
повторить команды, которые были введены неправильно.
     Теперь осталось самое простое - выполнить  эти  команды.  На  pис.2.1
показаны  все  шаги,  включая  команды  E.  На  вашем  экране  должны быть
аналогичные результаты после ввода каждой команды oтладчика.
     Введите команду R для просмотра содержимого  регистров  и  флагов.  В
данный момент отладчик  покажет  содержимое  регистров  в  шест.  формате,
например,

                          AX=0000, BX=0000, ...

     В зависимости от версии DOS  содержимое  регистров  на  экране  может
отличаться от показанного на рис.2.1.  Содержимое регистра  IP  (указатель
команд)  выводится  в  виде  IP=0100,  показывая  что  выполняемая команда
находится на смещении 100 байт  от  начала  сегмента  кодов.  (Вот  почему
использовалась команда E CS:100 для установки начала программы.)
     Регистр флагов на рис.2.1 показывает следующие значения флагов:

                         NV UP DI PL NZ NA PO NC

     Данные значения соответствуют: нет переполнения, правое  направление,
прерывания запрещены, знак плюс, не ноль, нет внешнего переноса,  контроль
на  честность  и  нет  переноса.  В  данный  момент  значение  флагов   не
существенно.

__________________________________________________________________________

D>DEBUG
-E CS:100 B8 23 01 05 25 00
-E CS:106 8B D8 03 D8 8B CB
-E CS:10C 2B C8 2B C0 90 CB
-R
AX=0000  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0100   NV UP EI PL NZ NA PO NC
13C6:0100 B8230         MOV     AX,0123
-T

AX=0123  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0103   NV UP EI PL NZ NA PO NC
13C6:0103 052500        ADD     AX,0025
-T

AX=0148  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0106   NV UP EI PL NZ NA PE NC
13C6:0106 8BD8          MOV     BX,AX
-T

AX=0148  BX=0148  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0108   NV UP EI PL NZ NA PO NC
13C6:0108 03D8          ADD     BX,AX
-T

AX=0148  BX=0290  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=010A   NV UP EI PL NZ AC PO NC
13C6:010A 8BCB          MOV     CX,BX
-T

AX=0148  BX=0290  CX=0290  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=010C   NV UP EI PL NZ AC PO NC
13C6:010C 2BC8          SUB     CX,AX
-T

AX=0148  BX=0290  CX=0148  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0100   NV UP EI PL NZ AC PO NC
13C6:010E 2BC0          SUB     AX,AX
-T

AX=0000  BX=0290  CX=0148  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0110   NV UP EI PL ZR NA PO NC
13C6:0110 90            NOP
-T

AX=0000  BX=0290  CX=0148  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0111   NV UP EI PL ZR NA PO NC
13C6:0111 CB            RETF
-
__________________________________________________________________________

     Рис.2.1. Трассировка машинных команд.


     Команда R  показывает  также  по  смешению  0100  первую  выполняемую
машинную команду.  Регистр CS на рис.2.1  содержит  значение  CS=13C6  (на
разных  компьютерах  оно  может различаться),  а машинная команда выглядит
следующим образом:

               13C6:0100  B82301   MOV  AX,0123

          CS=13C6 обозначает,  что  начало  сегментов  кода  находится  по
     смещению 13C6 или точнее 13C60.  Значение  13C6:0100  обозначает  100
     (шест.) байтов от начального адреса 13C6 в регистре CS.
          B82301 - машинная команда, введенная по адресу CS:100.
          MOV AX,0123 - ассемблерный  мнемонический  код,  соответствующий
     введенной машинной    команде.    Это    есть    результат   операции
     дисассемблирования,  которую обеспечивает отладчик для более простого
     понимания  машинных команд.  В последующих главах мы будем кодировать
     программы исключительно  в  командах  ассемблера.  Рассматриваемая  в
     данном случае команда обозначает пересылку непосредственного значения
     в регистр AX.

     В данный момент команда MOV  еще  не  выполнена.  Для  ее  выполнения
нажмите клавишу T (для трассировки) и клавишу Return. В результате команда
MOV будет выполнена и  отладчик  выдаст  на  экран  содержимое  регистров,
флаги, а также следующую на  очереди  команду.  Заметим,  что  регистр  AX
теперь содержит 0123. Машинная команда пересылки в регистр AX имеет код B8
и за этим кодом следует непосредственные данные 2301.  В  ходе  выполнения
команда B8 пересылает значение  23  в  младшую  часть  регистра  AX,  т.е.
однобайтовый регистр AL, а значение 01 - в старшую часть регистра AX, т.е.
в регистр AH:

                             AX: | 01 | 23 |

     Содержимое регистра IP:0103 показывает  адрес  следующей  выполняемой
команды в сегменте кодов:

               13C6:0103  052500   ADD  AX,0025

Для выполнения данной команды снова  введите  T.  Команда  прибавит  25  к
младшей (AL) части регистра AX и 00 к старшей (AH) части регистра AX, т.е.
прибавит 0025 к регистру AX. Теперь регистр AX содержит 0148, а регистр IP
0106 - адрес cледующей команды для выполнения.
     Введите  снова  команду  T.  Следующая  машинная  команда  пересылает
содержимое регистра AX в регистр BX и после ее выполнения  в  регистре  BX
будет содержаться значение 0148. Регистр  AX  сохраняeт  прежнее  значение
0148, поскольку команда MOV только  копиpует  данные  из  одного  места  в
другое.
     Теперь вводите команду T для пошагового выполнения каждой  оставшейся
в программе команды.  Следующая команда прибавит cодержимое регистра AX  к
содержимому  регистра  BX,  в  последнем  получим  0290.  Затем  программа
скопирует содержимое pегистра BX в CX, вычтет AX из CX,  и  вычтет  AX  из
него  самого.  После  этой  последней  команды,  флаг  нуля  изменит  свое
состояние c  NZ  (не нуль) на ZR (нуль),  так как результатом этой команды
является нуль (вычитание AX из самого себя очищает этот регистр в 0).
     Можно ввести T для выполнения последних команд NOP и RET, но  это  мы
сделаем позже.  Для просмотра программы в машинных кодах в сегменте  кодов
введите D для дампа:

               D CS:100

     В результате отладчик выдаст на  каждую  строку  экрана  по  16  байт
данных в шест. представлении (32 шест. цифры) и в символьном представлении
в коде ASCII (один  символ  на  каждую  пару  шест.  цифр).  Представление
машинного кода в символах ASCII не имеет смысла и может быть игнорировано.
В следующих разделах будет рассмотрен символьный дамп более подробно.
     Первая строка дампа начинается с 00 и представляет  содержимое  ячеек
от CS:100 до CS:10F. Вторая строка представляет cодержимое ячеек от CS:110
до CS:11F.  Несмотря на то, что ваша  программа  заканчивается  по  адресу
CS:111, команда Dump aвтоматически выдаст на восьми строках экрана дамп  с
адреса CS:100 до адреса CS:170.
     При  необходимости  повторить  выполнение  этих    команд    сбросьте
содержимое регистра IP  и  повторите  трассировку  снова.  Введите  R  IP,
введите 100, а затем необходимое число  команд  T.  После  каждой  команды
нажимайте клавишу Return.
     На рис.2.2  показан  результат выполнения команды D CS:100.  Обратите
внимание на машинный код с CS:100  до  111  и  вы  обнаружите  дамп  вашей
программы; следующие байты могут содержать любые данные.

__________________________________________________________________________

-D CS:100
13C6:0100 B8 23 01 05 25 00 8B D8-03 D8 8B CB 2B C8 2B C0 .#..%.......+.+.
13C6:0110 90 CB 8D 46 14 50 51 52-FF 76 28 E8 74 00 8B E5 ...F.PQR.v(.t...
13C6:0120 B8 01 00 50 FF 76 32 FF-76 30 FF 76 2E FF 76 28 ...P.v2.v0.v..v(
13C6:0130 E8 88 15 8B E5 BF 36 18-12 FF 36 16 12 8B 76 28 ......6...6...v(
13C6:0140 FF 74 3A 89 46 06 E8 22-CE 8B E5 30 E4 3D 0A 00 .t:.F.."...0.=..
13C6:0150 75 32 A1 16 12 2D 01 00-8B 1E 18 12 83 DB 00 53 u2...-.........S
13C6:0160 50 8B 76 28 FF 74 3A A3-16 12 89 1E 18 12 E8 FA P.v(.t:.........
13C6:0170 CD 8B E5 30 E4 3D 0D 00-74 0A 83 06 16 12 01 83 ...0.=..t.......
-Q
__________________________________________________________________________

     Рис.2.2. Дамп кодового сегмента.


     Для завершения работы с программой DEBUG введите Q (Quit - выход).  В
результате произойдет возврат в DOS и на экране  появится  приглашение  A>
или C>.  Если печатался протокол работы с отладчиком, то  для  прекращения
печати cнова нажмите Ctrl/PrtSc.


     ПРИМЕР МАШИННЫХ КОДОВ: ОПРЕДЕЛЕНИЕ ДАННЫХ
     ________________________________________________________________

     В  предыдущем  примере  использовались    непосредственные    данные,
описанные непосредственно в первых  двух  командах  (MOV  и  ADD).  Теперь
рассмотрим аналогичный пример, в котором значения 0123 и 0025 определены в
двух полях сигмента данных.  Данный пример позволяет понять как  компьютер
обеспечивает доступ к данным посредством регистра DS и адресного смещения.
     В  настоящем  примере  определены    области    данных,    содержащие
cоответственно следующие значения:

               Адрес в DS     Шест. знач.    Номера байтов

                  0000           2301           0  и  1
                  0002           2500           2  и  3
                  0004           0000           4  и  5
                  0006           2A2A2A         6, 7 и 8

     Вспомним, что шест. символ занимает половину  байта,  таким  oбразом,
например, 23 находится в байте 0 (в первом байте) сегмента данных, 01 -  в
байте 1 (т.е. во втором байте).
     Ниже показаны  команды  машинного  языка,  которые  обрабатывают  эти
данные:

Команда                            Назначение

A10000         Переслать слово (два байта),  начинающееся в DS  по  адресу
               0000, в регистр AX.
03060200       Прибавить содержимое слова (двух байт),  начинающегося в DS
               по адресу 0002, к регистру AX.
A30400         Переслать содержимое регистра AX в слово, начинающееся в DS
               по адресу 0004.
CB             Вернуться в DOS.

     Обратите внимание, что здесь имеются две  команды  MOV  с  pазличными
машинными кодами: A1 и A3. Фактически машинный код зависит  от  регистров,
на которые имеется ссылка, количества байтов (байт или слово), направления
передачи  данных  (из  регистра  или  в  регистр)  и    от    ссылки    на
непосредственные данные или на память.
     Воспользуемся опять отладчиком DEBUG для  ввода  данной  программы  и
анализа ее выполнения.  Когда отладчик выдал свое дефисное приглашение, он
готов к приему команд.
     Сначала введите команды E (Enter) для сегмента данных:

               E DS:00 23 01 25 00 00 00 (Нажмите Return)
               E DS:06 2A 2A 2A (Нажмите Return)

     Первая команда записывает три слова (шесть байтов) в начало  сегмента
данных,  DS:00.  Заметьте,  что  каждое  слово  вводилось    в    обратной
последовательности, так что 0123  есть  2301,  a  0025  есть  2500.  Когда
команда MOV будет обращаться к этим cловам, нормальная  последовательность
будет восстановлена и 2301 станет 0123, а 2500 - 0025.
     Вторая команда записывает три звездочки  (***)  для  того,  чтобы  их
можно было видеть впоследствии по команде D (Dump)  -  другого  назначения
эти звездочки не имеют.
     Введем теперь команды в сегмент кодов, опять начиная с адреса CS:100:

               E CS:100 A1 00 00 03 06 02 00
               E CS:107 A3 04 00 CB

     Теперь команды находятся в ячейках памяти от CS:100  до  CS:10A.  Эти
команды можно  выполнить  как это делалось ранее.  На рис.2.3 показаны все
шаги,  включая команды E.  На экране дисплея  должны  появиться  такие  же
результаты,  хотя  адреса  CS  и  DS  могут  различаться.  Для  пересмотра
информации в сегменте данных и в сегменте кодов введите команды  D  (Dump)
соответственно:

               для сегмента данных:     D DS:000 (Return)
               для сегмента кодов:      D CS:100 (Return)

     Сравните  содержимое  обоих  сегментов  с  тем,  что  вводилось  и  с
изображенным на  рис.2.3.  Содержимое памяти от DS:00 до DS:08 и от CS:100
до CS:10A должно быть идентично рис.2.3.

__________________________________________________________________________

D>DEBUG
-E DS:23 01 25 00 00
-E DS:2A 2A 2A
-E CS:100 A1 00 00 03 06 02 00
-E CS:107 A3 04 00 CB
-D DS:0
13C6:0000 23 01 25 00 00 9A 2A 2A-2A F0 F5 02 2C 10 2E 03 #.%...***...,...
13C6:0010 2C 10 BD 02 2C 10 B1 0D-01 03 01 00 02 FF FF FF ,...,...........
13C6:0020 FF FF FF FF FF FF FF FF-FF FF FF FF EF 0F 64 00 ..............d.
13C6:0030 61 13 14 00 18 00 C7 13-FF FF FF FF 00 00 00 00 a...............
13C6:0040 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
13C6:0050 CD 21 CB 00 00 00 00 00-00 00 00 00 00 20 20 20 .!...........
13C6:0060 20 20 20 20 20 20 20 20 00 00 00 00 00 20 20 20         .....
13C6:0070 20 20 20 20 20 20 20 20-00 00 00 00 00 00 00 00         ........
-R
AX=0000  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0100   NV UP EI PL NZ NA PO NC
13C6:0100 A10000        MOV     AX,[0000]                 DS:0000=0123
-T

AX=0123  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0103   NV UP EI PL NZ NA PO NC
13C6:0103 03060200      ADD     AX,[0002]                 DS:0002=0025
-T

AX=0148  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0107   NV UP EI PL NZ NA PE NC
13C6:0107 A30400        MOV     [0004],AX                 DS:0004=9A00
-T

AX=0148  BX=0000  CX=0000  DX=0000  SP=FFEE  BP=0000  SI=0000  DI=0000
DS=13C6  ES=13C6  SS=13C6  CS=13C6  IP=0108   NV UP EI PL NZ NA PO NC
13C6:010A CB            RETF
-D DS:0
13C6:0000 23 01 25 00 00 9A 2A 2A-2A F0 F5 02 2C 10 2E 03 #.%...***...,...
13C6:0010 2C 10 BD 02 2C 10 B1 0D-01 03 01 00 02 FF FF FF ,...,...........
13C6:0020 FF FF FF FF FF FF FF FF-FF FF FF FF EF 0F 64 00 ..............d.
13C6:0030 61 13 14 00 18 00 C7 13-FF FF FF FF 00 00 00 00 a...............
13C6:0040 00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
13C6:0050 CD 21 CB 00 00 00 00 00-00 00 00 00 00 20 20 20 .!...........
13C6:0060 20 20 20 20 20 20 20 20 00 00 00 00 00 20 20 20         .....
13C6:0070 20 20 20 20 20 20 20 20-00 00 00 00 00 00 00 00         ........
-Q
__________________________________________________________________________

     Рис.2.3. Трассировка машинных команд.


     Теперь введите R для просмотра содержимого регистров и флагов  и  для
отображения первой команды.  Регистры содержат те  же  значения,  как  при
старте первого примера. Команда отобразится в виде:

               13C6:0100      A10000    MOV  AX,[0000]

     Так, как регистр CS содержит 13C6, то CS:100 содержит первую  команду
A10000. Отладчик интерпретирует эту команду как MOV и определяет ссылку  к
первому адресу [0000] в сегменте данных.  Квадратные скобки необходимы для
указания ссылки к адресу памяти, а не к непосредственным данным.
     Если бы квадратных скобок не было, то команда

                               MOV AX,0000

oбнулила бы регистр AX  непосредственным значением 0000.
     Теперь введем команду T.  Команда MOV AX,[0000]  перешлет  cодержимое
слова, находящегося по нулевому смещению в сегменте данных, в регистр  AX.
Содержимое 2301 преобразуется командой в 0123 и помещается в регистр AX.
     Следующую команду ADD можно выполнить, введя еще  раз  команду  T.  В
результате содержимое слова в DS по смещению 0002 прибавится в регистр AX.
Теперь регистр AX будет содержать сумму 0123 и 0025, т.е. 0148.
     Следующая команда MOV [0004],AX выполняется опять  по  вводу  T.  Эта
команда пересылает содержимое регистра AX в слово по  смешению  0004.  Для
просмотра изменений содержимого сегмента данных введите  D  DS:00.  Первые
девять байт будут следующими:

          значение в сегменте данных: 23 01 25 00 48 01 2A 2A 2A
          величина смещения:          00 01 02 03 04 05 06 07 08

Значение 0148, которое было занесено из регистра AX в  сегмент  данных  по
смещению 04 и 05, имеет обратное  представление  4801.  Заметьте  что  эти
шест. значения представлены в правой части  экрана  их  символами  в  коде
ASCII.  Например, шест.23 генерируeтся в символ #, а шест.25 - в символ %.
Три байта с шест. значениями 2A высвечиваются в виде трех звездочек (***).
Левая  часть  дампа  показывает  действительные  машинные  коды,   которые
находятся в памяти.  Правая часть дампа только помогает проще локализовать
символьные (срочные) данные.
     Для просмотра содержимого сегмента кодов введите D  DS:100  так,  как
показано на рис.2.3. В  заключении  введите  Q  для  завершения  работы  с
программой.


     МАШИННАЯ АДРЕСАЦИЯ
     ________________________________________________________________

     Для доступа к машинной  команде  процессор  определяет  ее  адрес  из
содержимого  регистра  CS  плюс  смещение  в  регистре    IP.    Например,
предположим, что  регистр  CS  содержит  шест.04AF  (действительный  адрес
04AF0), а регистр IP содержит шест. 0023:

                          CS:      04AF0
                          IP:       0023
                                   -----
               Адрес команды:      04B13

     Если, например, по адресу 04B13 находится команда:

               A11200         MOV  AX,[0012]
               |
          Адрес 04B13

то в памяти по адресу 04B13  содержится  первый  байт  команды.  Процессор
получает доступ к этому байту и по  коду  команды  (A1)  oпределяет  длину
команды - 3 байта.
     Для доступа к данным по смещению [0012] процессор  определяет  aдрес,
исходя из содержимого регистра DS (как правило) плюс cмещение  в  операнде
команды.  Если  DS  содержит  шест.04B1  (реальный  адрес    04B10),    то
результирующий адрес данных определяется cледующим образом:

                     DS:      04B10
               Смещение:       0012
                              -----
           Адрес данных:      04B22

     Предположим, что  по  адресам  04B22  и  04B23  содержатся  следующие
данные:

               Содержимое:         24        01
                                   |         |
               Адрес:           04B22     04B23

     Процессор выбирает значение 24 из ячейки по адресу 04B22  и  помещает
его в регистр AL, и значение 01 по адресу 04B23 - в регистр AH. Регистр AX
будет содержать в  результате  0124.  В  процессе  выборки  каждого  байта
команды процессор увеличивает значение регистра IP на единицу, так  что  к
началу выполнения следующей команды в нашем  примере  IP  будет  содержать
смещение  0026.  Таким  обpазом  процессор  теперь  готов  для  выполнения
следующей команды, которую он получает по адресу из  регистра  CS  (04AF0)
плюс текущее смещение в регистре IP (0026), т.е. 04B16.


                             Четная адресация
                            ------------------
     Процессор 8086, 80286 и 80386  действуют  более  эффективно,  eсли  в
программе обеспечиваются доступ к словам, расположенным по четным адресам.
В  предыдущем примере процессор может сделать oдну выборку слова по адресу
4B22 для загрузки его непосредственно в регистр.  Но если слово начинается
на  нечетном  адресе,  процессор  выполняет двойную выборку.  Предположим,
например,  что команда должна выполнить выборку  слова,  начинающегося  по
адреcу 04B23 и загрузить его в регистр AX:

               Содержимое памяти:  |хх|24|01|хх|
                                       |
                           Адрес:  04B23

Сначала процессор получает доступ к  байтам  по  адресам  4B22  и  4B23  и
пересылает байт из ячейки 4B23 в регистр AL.  Затем он получает  доступ  к
байтам по адресам 4B24 и 4B25 и пересылает байт из ячейки 4B23  в  регистр
AH. В результате регистр AX будет содержать 0124.
     Нет необходимости в каких-либо специальных  методах  программирования
для получения четной или нечетной адресации,  не обязательно  также  знать
является  адрес  четным  или нет.  Важно знать,  что,  во-первых,  команды
обращения к памяти меняют слово  при  загрузке  его  в  регистр  так,  что
получается правильная последовательность байт и, во-вторых, если программа
имеет частый  доступ  к  памяти,  то  для  повышения  эффективности  можно
определить данные так, чтобы они начинались по четным адресам.
     Например, поскольку  начало  сегмента  должно  всегда  находиться  по
четному адресу, первое поле данных начинается также по  четному  адресу  и
пока следующие поля определены как слова, имеющие четную  длину,  они  все
будут  начинаться  на  четных  адресах.  В  большинстве  случаев,  однако,
невозможно заметить ускорения работы  при  четной  адресации  из-за  очень
высокой скорости работы процессоров.
     Ассемблер имеет директиву EVEN,  которая вызывает выравнивание данных
и команд на четные адреса памяти.


     ПРИМЕР МАШИННЫХ КОДОВ: ОПРЕДЕЛЕНИЕ РАЗМЕРА ПАМЯТИ
     ________________________________________________________________

     В первом упражнении  в  данной  главе  проводилась  проверка  размера
памяти (RAM), которую имеет компьютер. BIOS (базовая система ввода/вывода)
в  ROM  имеет  подпрограмму,  которая  определяет  pазмер  памяти.   Можно
обратиться в BIOS по команде INT, в данном cлучае  по  прерыванию  12H.  В
результате BIOS возвращает  в  регистр  AX  размер  памяти  в  килобайтах.
Загрузите в память DEBUG и введите для INT 12H и  RET  следующие  машинные
коды:

                            E CS:100 CD 12 CB

Нажмите R (и  Return)  для  отображения  содержимого  регистров  и  первой
команды. Регистр IP содержит 0100, при этом высвечивается команда INT 12H.
Теперь нажмите T  (и  Return)  несколько  раз  и  просмотрите  выполняемые
команды BIOS  (отладчик  показывает  мнемокоды,  хотя  в  действительности
выполняются машинные коды):

               STI
               PUSH  DS
               MOV   AX,0040
               MOV   DS,AX
               MOV   AX,[0013]
               POP   DS
               IRET

В этот момент  регистр  AX  содержит  размер  памяти  в  шестнадцатиpичном
формате.  Теперь введите еще раз команду T для выхода из BIOS и возврата в
вашу программу.  На экране появится команда RET  для  машинного  кода  CB,
который был введен вами.


     СПЕЦИАЛЬНЫЕ СРЕДСТВА ОТЛАДЧИКА
     ________________________________________________________________

     В операционной системе DOS версии 2.0  и  старше  можно  использовать
DEBUG для ввода команд ассемблера так же, как и команд машинного языка. На
практике можно пользоваться обоими методами.


                                Команда A
                               -----------
     Команда отладчика A (Assemble) переводит DEBUG в режим приема  команд
ассемблера и перевода  их  в  машинные  коды.  Установим  начальный  адрес
следующим образом:

               A 100 [Return]

Отладчик выдаст   значение   адреса  сегмента  кодов  и  смещения  в  виде
хххх:0100.  Теперь можно вводить каждую команду, завершая клавишей Return.
Когда вся программа будет введена, нажмите снова клавишу Return для выхода
из режима ассемблера. Введите следующую программу:

               MOV  AL,25     [Return]
               MOV  BL,32     [Return]
               ADD  AL,BL     [Return]
               RET            [Return]

по завершению на экране будет следующая информация:

               хххх:0100      MOV  AL,25
               хххх:0102      MOV  BL,32
               хххх:0104      ADD  AL,BL
               хххх:0106      RET

В этот момент отладчик готов  к  приему  следующей  команды.  При  нажатии
Return операция будет прекращена.
     Можно видеть, что отладчик определил стартовые адреса каждой команды.
Прежде чем выполнить программу, проверим сгенерированные машинные коды.


                                Команда U
                               -----------
     Команда отладчика U (Unassemble) показывает машинные коды для  команд
ассемблера.  Необходимо  сообщить  отладчику  адреса  первой  и  последней
команды, которые необходимо просмотреть  (в  данном  cлучае  100  и  106).
Введите:

               U 100,106 [и Return]

и на экране появится

               хххх:0100      B025      MOV  AL,25
               хххх:0102      B332      MOV  BL,32
               хххх:0104      00D8      ADD  AL,BL
               хххх:0106      C3        RET

Теперь проведем трассировку выполнения программы, начиная с команды R  для
вывода содержимого регистров и первой команды программы.  С помощью команд
T выполним последовательно все команды программы.
     Теперь вы знаете, как вводить программу в машинном коде или на  языке
ассемблера.  Обычно используется ввод на языке ассемблера, когда  машинный
код неизвестен, а ввод в машинном коде - для изменения программы во  время
выполнения.  Однако в действительности программа DEBUG  предназначена  для
отладки программ и в следующих  главах  основное  внимание  будет  уделено
использованию языка ассемблера.


                    Сохранение программы из отладчика
                   -----------------------------------
     Можно использовать DEBUG для сохранения программ на диске в следующих
случаях:

          1. После загрузки программы в память  машины  и  ее  модификации
     необходимо сохранить измененный вариант. Для этого следует:

               - загрузить  программу  по  ее  имени:  DEBUG  n:имя  файла
          [Return]
               - просмотреть  программу  с  помощью  команды  D  и  ввести
          изменения по команде E,
               - записать измененную программу: W [Return]

          2. Необходимо с  помощью  DEBUG  написать  небольшую  по  объему
     программу и сохранить ее на диске. Для этого следует:

               - вызвать отладчик DEBUG,
               - с помощью  команд  A  (assemble)  и  E  (enter)  написать
          программу,
               - присвоить  программе имя:  N имя файла.COM [Return].  Тип
          программы  должен  быть  COM  (см.   гл.6   для   пояснений   по
          COM-файлам),
               - так  как  только  программист  знает,  где  действительно
          кончается его программа, указать  отладчику  длину  программы  в
          байтах. В последнем примере концом программы является команда

               хххх:0106      C3   RET

          Эта команда однобайтовая и поэтому размер программы будет  равен
          106 (конец) минус 100 (начало), т.е. 6.
               - запросить регистр CX командой: R CX [Return]
               - отладчик выдаст на этот запрос CX 0000 (нулевое значение)
               - указать длину программы - 6,
               - записать измененную программу: W [Return]

     В обоих случаях DEBUG выдает сообщение "Writing nnnn bytes."  (Запись
nnnn байтов).  Если nnnn равно 0, то  произошла  ошибка  при  вводе  длины
программы, и необходимо повторить запись cнова.


     ОСНОВНЫЕ ПОЛОЖЕНИЯ НА ПАМЯТЬ
     ________________________________________________________________

     Отладчик DOS DEBUG это  достаточное  мощное  средство,  полезное  для
отладки  ассемблерных  программ.  Однако  следует  быть  осторожным  с  ее
использованием, особенно для команды E (ввод).  Ввод данных в неправильные
адреса  памяти  или  ввод  некорректных   данных    могут    привести    к
непредсказуемым результатам.  На экране  в  этом  случае  могут  появиться
"странные" символы, клавиатура заблокирована или даже DOS прервет DEBUG  и
перезагрузит себя  с  диска.  Какие-либо  серьезные  повреждения  вряд  ли
произойдут,  но возможны некоторые неожиданности,  а также потеря  данных,
которые вводились при работе с отладчиком.
   Если данные, введенные в сегмент данных или  сегмент  кодов,  оказались
некорректными, следует, вновь используя команду E, исправить  их.  Однако,
можно не заметить ошибки  и  начать  трассиpовку  программы.  Но  и  здесь
возможно еще использовать команду E для изменений.  Если необходимо начать
выполнение с первой команды, то следует установить в  регистре  командного
указателя (IP) значение 0100. Введите команду  R  (register)  и  требуемый
регистр в следующем виде:

                              R IP [Return]

     Отладчик выдаст на экран содержимое регистра IP и перейдет в ожидание
ввода. Здесь следует ввести значение 0100 и нажать для проверки результата
команду R (без IP). 0тладчик выдаст содержимое регистров, флагов и  первую
выполняемую команду.  Теперь можно, используя команду T,  вновь  выполнить
трассировку программы.
     Если  ваша  программа  выполняет  какие-либо  подсчеты,  то  возможно
потребуется очистка некоторых областей памяти и регистров.  Но yбедитесь в
сохранении  содержимого  регистров  CS,  DS,  SP  и  SS,  которые    имеют
специфическое назначение.
     Прочитайте в руководстве по DOS главу о программе DEBUG.  В настоящий
момент рекомендуется: вводный материал и следующие команды oтладчика: дамп
(D), ввод (E), шестнадцатиричный (H), имя (N), выход  (Q),  регистры  (R),
трассировка (T) и  запись  (W).  Можно  oзнакомиться  также  и  с  другими
командами и проверить как они работают.



     ВОПРОСЫ ДЛЯ САМОПРОВЕРКИ
     ________________________________________________________________

     2.1. Напишите машинные команды для
          а) пересылки шест. значения 4629 в регистр AX;
          б) сложения шест. 036A с содержимым регистра AX.

     2.2. Предположим, что была введена следующая е команда:

               E CS:100 B8 45 01 05 25 00

     Вместо шест.  значения 45 предполагалось 54.  Напишите команду E  для
корректировки   только   одного   неправильно   введенного   байта,   т.е.
непосредственно замените 45 на 54.

     2.3. Предположим, что введена следующая е команда:

               E CS:100 B8 04 30 05 00 30 CB

          а) Что  представляют  собой  эти  команды?  (Сравните  с  первой
     программой в этой главе).
          б) После выполнения этой программы в  регистре  AX  должно  быть
     значение 0460, но в действительности оказалось 6004. В чем  ошибка  и
     как ее исправить?
          в) После исправления команд необходимо снова выполнить программу
     с первой команды. Какие две команды отладчика потребуются?

     2.4. Имеется следующая программа в машинных кодах:

               B0 25 D0 E0 B3 15 F6 E3 CB

     Программа выполняет следующее:

          - пересылает шест. значение 25 в регистр AL;
          -  сдвигает  содержимое  регистра  AL  на  один  бит  влево   (в
     результате в AL будет 4A);
          - пересылает шест. значение 15 в регистр BL;
          - умножает содержимое регистра AL на содержимое регистра BL.

Используйте отладчик для ввода (E) этой программы  по  адресу  CS:100.  Не
забывайте, что все значения представлены в шестнадцатиричном  виде.  После
ввода программы наберите D  CS:100  для  просмотра  сегмента  кода.  Затем
введите команду R и необходимое число команд T для  пошагового  выполнения
программы до команды RET.  Какое значение будет в регистре AX в результате
выполнения программы?

     2.5.  Используйте  отладчик  для  ввода  (E)  следующей  программы  в
машинных кодах:

               Данные:        25 15 00 00
               Машинный код:  A0 00 00 D0 E0 F6 26 01 00 A3 02 00 CB

     Программа выполняет следующее:

          - пересылает содержимое одного байта  по  адресу  DS:00  (25)  в
     регистр AL;
          - сдвигает содержимое регистра AL влево на один бит  (получая  в
     результате 4A);
          - умножает AL на содержимое одного байта по адресу DS:01 (15);
          - пересылает результат из AX в  слово,  начинающееся  по  адресу
     DS:02.

     После ввода программы используйте команды D  для  просмотра  сегмента
данных и сегмента кода. Затем введите команду R и необходимое число команд
T для достижения конца программы (RET).  В этот момент регистр  AX  должен
содержать результат 0612. Еще раз используйте команду D DS:00 и  заметьте,
что по адресу DS:02 значение записано как 1206.

     2.6. Для предыдущего  задания  (2.5)  постройте  команды  для  записи
программы на диск под именем TRIAL.COM.

     2.7. Используя команду A отладчика, введите следующую про грамму:

               MOV  BX,25
               ADD  BX,30
               SHL  BX,01
               SUB  BX,22
               NOP
               RET

сделайте  ассемблирование  и  трассировку  выполнения  этой  программы  до
команды NOP.